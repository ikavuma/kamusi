<?php
mb_internal_encoding("UTF-8");

/***
 *@file
 *This is an adhoc theme file to generate verb forms for all languages. This
 *file will go away when we understand a little bit better how things work and
 *can abstract it into a module. Right now it's basically just a generic
 *file containing rules per language so it's bound to be a bit verbose.
 *
 *If you want to add a new language, you need to do a minimum of 2 things
 * 1. Setup the language's subject pronouns in _get_pronouns()
 * 2. Modify SimplePresent() and add a section for the new language
 *
 * Most language learners care about speaking in the present tense that's why
 * it's best to add the above 2 things first for any language before bothering
 * with any other types of pronouns or tenses.
 *
 * Note that because this is a theme file, the functions defined here are only
 * available when the "paldo" theme is enabled.
 * An issue I run into testing--if the $node->posvid isn't set correctly none
 * of the verbs (and nouns) stuff will show. To fix, simply update the database
 * (admin/kw/kdictionary) and make sure that the 'Primary Category' is set to
 * the vocabulary in which 'noun' and 'verb' are defined.
 */

/**
 * Return conjugated forms of the verb in preformatted html for the PALDO theme
 */
function _conjugate($verb, $context, $tenses=array('SimplePresent'), $lang='en'){
    foreach($tenses as $tense){
        $conjugation = tense($verb, $tense, $context, $lang);
        if(trim($conjugation)){
            $output.="<fieldset class='tense collapsible'>";
            $output.="<legend>".tenselabel($tense)."</legend>";
            $output.= $conjugation;
            $output.="</fieldset>";
        }
    }
    $output.="<br style='clear:both;'/>";
    return $output;
}

//----------------- HELPER FUNCTIONS ---------------
function aOn(){
	$verb = arg(2);

	if((mb_substr($verb, 0, 1) != "n") && (mb_substr($verb, 0, 1) != "m")) //negative

	return t("Negative");

	else

	return t("Affirmative");

}



function isNeg()

{

	$verb = arg(2);

	if((mb_substr($verb, 0, 1) != "n") && (mb_substr($verb, 0, 1) != "m")) //negative

	return 1;

	else

	return 0;

}

//Negative Prefixes
function neg($verb)
{
	if((mb_substr($verb, 0, 1) != "n") && (mb_substr($verb, 0, 1) != "m"))
	{
		switch(mb_substr($verb, 0, 1))
		{
			case "b":
			case "p":
			case "f":
			case "m":
			{
				return  "m".$verb;
			}
			break;
			default:
			{
				return "n".$verb;
			}
			break;
		}
	}
	else
	{
		return mb_substr($verb, 1, mb_strlen($verb)-1);
	}
}

/**
 *$persons is an array that is usually generated by _get_pronouns()
 */
function SimplePresent($language, $verb, $context, $persons){
    $output = "<ul id='SimplePresent'>";
    switch($language){
        case 'ak'://Akan - simplest. Verb doesn't change for all persons
            foreach($persons as $person=>$label){
                switch($person){
                    default:
                        $output.= "<li class='$person'>$label<em>".str_replace($verb, $verb."</em>" ,$context)."</li>";
                        break;
                }
            }
            break;
        case 'en'://English - Verb only changes for 3rd person singular
            foreach($persons as $person=>$label){
                switch($person){
                    case '3pS': //The 3pS adds an 's' to the verb
                        $ending.= 's';
                        break;
                    default:
                        $ending = '';                        
                        break;
                }
                $output.= "<li class='$person'>$label <em>".str_replace($verb, $verb.$ending."</em>" ,$context)."</li>";
            }
            break;
        case 'fr'://French -- slightly complicated because of all the conjugations
            foreach($persons as $person=>$label){
                $steminfo = _paldo_verb_stem($verb, $language);
                if(in_array(substr($steminfo['affix'], 0, 2), array('re', 'ir', 'er'))){
                    $search = $verb;
                    $replace = $steminfo['stem'];
                }
                $ending = "?";
                switch($person){
                    case '1pS'://All first-person verbs are easy
                        switch($steminfo['affix']){
                            case 're':
                                $ending = 's';
                                break;
                            case 'er':
                                $ending = 'e';
                                break;
                            case 'ir':
                                $ending = 'is';
                                break;
                        }
                        break;
                    case '2pS'://Second person verbs change ending according to the type of verb
                        switch($steminfo['affix']){
                            case 're':
                                $ending = 's';
                                break;
                            case 'er':
                                $ending = 'es';
                                break;
                            case 'ir':
                                $ending = 'is';
                                break;
                        }
                        break;
                    case '3pS':
                        switch($steminfo['affix']){
                            case 're':
                                $ending = '';
                                break;
                            case 'er':
                                $ending = 'e';
                                break;
                            case 'ir':
                                $ending = 'it';
                                break;
                        }
                        break;
                    case '1pP':
                        $ending = 'issons';
                        break;
                    case '2pP':
                        $ending = 'issez';
                        break;
                    case '3pP':
                        $ending = 'issent';
                        break;
                }
                $output.= "<li class='$person'>$label <em>".str_replace($search, $replace.$ending."</em>" ,$context)."</li>";
            }
            break;
        case 'es'://Spanish--like French each person has a separate conjugation
            foreach($persons as $person=>$label){
                $steminfo = _paldo_verb_stem($verb, $language);
                if(in_array(substr($steminfo['affix'], 0, 2), array('ar', 'ir', 'er'))){
                    $search = $verb;
                    $replace = $steminfo['stem'];
                }
                $ending = "?";
                switch($person){
                    case '1pS'://All first-person verbs are easy
                        $ending = 'o';
                        break;
                    case '2pS'://Second person verbs change ending according to the type of verb
                        switch($steminfo['affix']){
                            case 'ar':
                                $ending = 'as';
                                break;
                            case 'er':
                            case 'ir':
                                $ending = 'es';
                                break;
                        }
                        break;
                    case '3pS':
                        switch($steminfo['affix']){
                            case 'ar':
                                $ending = 'a';
                                break;
                            case 'er':
                            case 'ir':
                                $ending = 'e';
                                break;
                        }
                        break;
                    case '1pP':
                        switch($steminfo['affix']){
                            case 'ar':
                                $ending = 'amos';
                                break;
                            case 'er':
                                $ending = 'emos';
                                break;
                            case 'ir':
                                $ending = 'imos';
                                break;
                        }
                        break;
                    case '2pP':
                        switch($steminfo['affix']){
                            case 'ar':
                                $ending = 'áis';
                                break;
                            case 'er':
                                $ending = 'éis';
                                break;
                            case 'ir':
                                $ending = 'ís';
                                break;
                        }
                        break;
                    case '3pP':
                        switch($steminfo['affix']){
                            case 'ar':
                                $ending = 'an';
                                break;
                            case 'er':
                            case 'ir':
                                $ending = 'en';
                                break;
                        }
                        break;
                }
                $output.= "<li class='$person'>$label <em>".str_replace($search, $replace.$ending."</em>" ,$context)."</li>";
            }
            break;
    }
    $output.= "</ul>";
    return $output;
}

/**
 * Akan - mereda, English - I am sleeping
 */
function PresentContinuous($language, $verb, $context, $persons){
    $output = "<ul id='PresentContinuous'>";
    switch($language){
        case 'ak':
            foreach($persons as $person=>$label){
                switch($person){
                    default:
                        $output.= "<li class='$person'>$label<em>".str_replace($verb, 'a'.$verb."</em>" ,$context)."</li>";
                        break;
                }
            }
            break;
    }
    $output.= "</ul>";
    return $output;
}

/**
 * Akan - Meada, English - I have slept
 */
function PresentPerfect($language, $verb, $context, $persons){
    $output = "<ul id='PresentPerfect'>";
    switch($language){
        case 'ak':
            foreach($persons as $person=>$label){
                switch($person){
                    default:
                        $output.= "<li class='$person'>$label<em>".str_replace($verb, 'a'.$verb."</em>" ,$context)."</li>";
                        break;
                }
            }
            break;
    }
    $output.= "</ul>";
    return $output;
}

//Present Perfect Continuous: Na mereda
function PresPerfectCont($verb)
{
	return PresentContinuous($verb);
}

//Future Simple (I will come)
function FutureSimple($verb)
{
//	return ( !isNeg()? "mbɛ".neg($verb):"bɛ".$verb);
	return ("a".$verb);
}

//Future Continuous (Motional - coming to): Merebɛda
function FutureCont($verb)
{
	return "re".(!isNeg()? "mbɛ".neg($verb):"bɛ".$verb);
}

//Future Simple (Motional - going to): Mekɔda
function FutureSimpleG($verb)
{
	return (!isNeg()? "nkɔ".neg($verb):"kɔ".$verb);
}

//Future Continuous (Motional - going to): Merekɔda
function FutureContG($verb)
{
	return "re".(!isNeg()? "nkɔ".neg($verb):"kɔ".$verb);
}

//Simple Past (Not followed by object or modifier): Medae
function SimplePast($verb)
{
	mb_internal_encoding("UTF-8");
	if(!!isNeg())
	{
		if($pos = mb_strpos(trim($verb), " "))
		{
			return SimplePast(mb_substr($verb, 0, $pos)).(mb_substr($verb, $pos));
		}
		else
		{
			$last = (mb_substr($verb, -1, 1));
			if(isVowel($last))
			{
				switch($last)
				{
					case "i":
					case "u":
					{
						return $verb."i";
					}
					break;
					default:
					{
						return $verb."e";
					}
					break;
				}
			}
			else
			{
				$lastVowel = (mb_substr($verb, -2, 1));
				switch($lastVowel)
				{
					case "i":
					case "u":
					{
						return $verb."ii";
					}
					break;
					default:
					{
						return $verb."ee";
					}
					break;
				}
			}
		}
	}
	else
	{
		if($pos = mb_strpos(trim($verb), " "))
		{
			return SimplePast(mb_substr($verb, 0, $pos)).(mb_substr($verb, $pos));
		}
		else
		return "a".$verb;
	}
}

//Simple Past (Followed by object or modifier): Medaa
function SimplePastObj($verb)
{
	mb_internal_encoding("UTF-8");
	if(!!isNeg())
	{
		if($pos = mb_strpos(trim($verb), " "))
		{
			return SimplePastObj(mb_substr($verb, 0, $pos)).(mb_substr($verb, $pos));
		}
		else
		return $verb.(mb_substr($verb, -1, 1));
	}
	else
	{
		if($pos = mb_strpos(trim($verb), " "))
		{
			return SimplePastObj(mb_substr($verb, 0, $pos)).(mb_substr($verb, $pos));
		}
		else
		return "a".$verb;
	}
}

//Helper functions
function isVowel($c, $lang){
    $bool = false;
    switch($lang){
        case 'ak':
            switch(mb_strtolower($c)){
		case "a":
		case "e":
		case "i":
		case "o":
		case "u":
		case "ɔ":
		case "ɛ":
		    $bool = true;
                    break;
		default:
		    $bool = false;
                    break;
            }
    }
    return $bool;
}

/**
 * The $context should contain the $verb. 
 * Typically the $tense is a function so if the $tense is SimplePast you
 * need to find SimplePast() and make any modifications there
 */
function tense($verb, $tense, $context, $lang){
    if(function_exists($tense)){	
        return $tense($lang, $verb, $context, _get_pronouns($lang));
    }
}

function tenselabel($tense){
    switch($tense){
        case 'SimplePresent':
            $tenselabel = t('Simple Present');
            break;
        case 'SimplePast':
            $tenselabel = t('Simple Past');
            break;
        case 'PastParticiple':
            $tenselabel = t('Past Participle');
            break;
        case 'SimplePast-object':
            $tenselabel = t('Simple Past. Not followed by an object');
            break;
        case 'SimplePast+object':
            $tenselabel = t('Simple Past. Followed by an object');
            break;
        case 'FutureSimple':
            $tenselabel = t('Future Simple');
            break;
        case 'FutureSimpleG':
            $tenselabel = t('Future Simple - Motional. ');
            break;
        case 'FutureContinuous':
            $tenselabel = t('Future Continuous');
            break;
        case 'FutureContinuousG':
            $tenselabel = t('Future Continuous - Motional');
            break;
        case 'PresentContinuous':
            $tenselabel = t('Present Continuous/Everyday');
            break;
        case 'PresentPerfect':
            $tenselabel = t('Present Perfect');
            break;
        case 'PresentPerfectContinuous':
            $tenselabel = t('Present Perfect Continuous');
            break;
    }
    return $tenselabel;
}



/**
 * Get the relevant pronouns per language and per type of pronoun
 */
function _get_pronouns($language, $type='subject'){
    $pronouns = array();
    switch($language){
        case 'en':
            switch($type){
                case 'subject':
                    $pronouns['1pS'] = "I";     //1st person singular
                    $pronouns['2pS'] = "You";   
                    $pronouns['3pS'] = "She/He/It";
                    $pronouns['1pP'] = "We";    //1st person plural
                    $pronouns['2pP'] = "You and you";
                    $pronouns['3pP'] = "They";
                    break;
            }
            break;
        case 'ak':
            switch($type){
                case 'subject':
                    $pronouns['1pS'] = "me";
                    $pronouns['2pS'] = "wo/e";
                    $pronouns['3pS'] = "ɔ";
                    $pronouns['1pP'] = "yɛ";
                    $pronouns['2pP'] = "mo/hom";
                    $pronouns['3pP'] = "wɔ";
                    break;
            }
            break;
        case 'es':
            switch($type){
                case 'subject':
                    $pronouns['1pS'] = "yo";
                    $pronouns['2pS'] = "tu";
                    $pronouns['3pS'] = "ella/él/usted";
                    $pronouns['1pP'] = "nosotros/nosotras";
                    $pronouns['2pP'] = "vosotros/vosotras";
                    $pronouns['3pP'] = "ellas/ellos/ustedes";
                    break;
            }
            break;
        case 'fr':
            switch($type){
                case 'subject':
                    $pronouns['1pS'] = "je";
                    $pronouns['2pS'] = "tu";
                    $pronouns['3pS'] = "elle/il/on";
                    $pronouns['1pP'] = "nous";
                    $pronouns['2pP'] = "vous";
                    $pronouns['3pP'] = "elles/ils";
                    break;
            }
    }
    return $pronouns;
}

/**
 * Get the verb stem using language-specific rules
 */
function _paldo_verb_stem($verb, $language){
    $stem = $verb;
    switch($language){
        case 'es': //Spanish--for regular verbs simply strip off the endings
            $end = mb_substr($verb, -2)=='se'? mb_substr($verb, -4): mb_substr($verb, -2);
            $affix = 'suffix'; //The suffix always tells us what we need to know
            $stem = mb_substr($verb, 0, (0-strlen($end)));
            break;
        case 'fr':
            if(in_array(mb_substr($verb, -2), array('ir', 'er', 're'))){
                $affix = 'suffix';
                $stem = mb_substr($verb, 0, -2);
                $end = mb_substr($verb, -2);
            }
            break;
    }    
    return array('stem'=>$stem, 'affixtype'=>$affix, 'affix'=>$end);
}